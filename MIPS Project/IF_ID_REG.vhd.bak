library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity F_ID_REG is
    Port ( INSTRUCT : in  STD_LOGIC_VECTOR (31 downto 0);
           PC : in  STD_LOGIC_VECTOR (31 downto 0);
           INSTRUCT_OUT : out  STD_LOGIC_VECTOR (31 downto 0);
           PC_OUT : out  STD_LOGIC_VECTOR (31 downto 0);
           CLK : in  STD_LOGIC;
           STALL : in  STD_LOGIC;
           FLUSH : in  STD_LOGIC
           );
end F_ID_REG;

architecture Behavioral of F_ID_REG is

signal INSTRUCT_TEMP : STD_LOGIC_VECTOR(31 downto 0) := x"00000000";
signal c: std_logic := '0';  -- for debugging purposes
signal PC_TEMP : STD_LOGIC_VECTOR(31 downto 0) := x"00000000";

begin

process (CLK, FLUSH,STALL,INSTRUCT) 
begin
    if(CLK'event and CLK = '1') then
        if(STALL = '0') then    -- if there is no stall then operate normally
            INSTRUCT_TEMP <= INSTRUCT;
            PC_TEMP <= PC;
        end if;
    
    elsif(FLUSH = '1') then   -- if there is a flush, clear the instruction
        c <= '1';
        INSTRUCT_TEMP <= x"00000000";  -- clear instruction
        -- Do not change PC_TEMP, as the PC is already updated externally
    end if;
end process;

INSTRUCT_OUT <= INSTRUCT_TEMP;
PC_OUT <= PC_TEMP;

end Behavioral;


